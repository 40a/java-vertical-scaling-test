type: update
description: |
    Java vertical scaling test on Kubernetes:
    * G1
    * Shenandoah
    * G1 @ Dragonwell 8.1.1
    * ZGC @ Oracle OpenJDK
    * C4 @ Zing
    * OpenJ9

    **Important!** Apply this Add-On to a Kubernetes Cluster with **6** worker nodes.
    Each pod is deployed to its dedicated labeled node to easily track memory utilization.


name: Java Vertical Scaling on Kubernetes
logo: https://github.com/jelastic/java-vertical-scaling-test/raw/master/kubernetes/images/kube.png
baseUrl: https://raw.githubusercontent.com/jelastic/java-vertical-scaling-test/master/kubernetes

globals:
  # keep \\\\n for sed replacement!!!
  cmd: java --uninstall; echo -ne '\\\\n' | java -jar app.jar 100 2
  limit: 4Gi
  cloudlets: 40
  common: -Xmx4g -Xms32m -XX:+UseCompressedOops
  zing: -Xmx500m -Xms32m -XX:+UseCompressedOops -XX:+UseZST
  openjdk: -XX:+UnlockExperimentalVMOptions -XX:+UseZGC -XX:ZUncommitDelay=1 -XX:ZCollectionInterval=30
  openj9: -XX:+IdleTuningCompactOnIdle -XX:+IdleTuningGcOnIdle -XX:IdleTuningMinIdleWaitTime=1 -Xjit:waitTimeToEnterDeepIdleMode=1000
  adoptopenjdk: -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=compact
  liberica: -XX:+UseG1GC -XX:G1PeriodicGCInterval=10k
  dragonwell: -Xmx4g -Xms4g -XX:+UseCompressedOops -XX:+UseG1GC -XX:+G1ElasticHeap -XX:+ElasticHeapPeriodicUncommit -XX:ElasticHeapPeriodicYGCIntervalMillis=10000 -XX:ElasticHeapYGCIntervalMinMillis=1000 -XX:ElasticHeapInitialMarkIntervalMinMillis=1000 -XX:ElasticHeapPeriodicInitialMarkIntervalMillis=300000 -XX:ElasticHeapPeriodicUncommitStartupDelay=1 -XX:ElasticHeapPeriodicMinYoungCommitPercent=10

onInstall:
 - labelNodes
 - renameNodes
 - setCloudlets
 - deploy
 - monit
 - getPods
actions:
  labelNodes:
    - cmd [${nodes.k8sm.master.id}]: curl ${baseUrl}/scripts/labelnodes.sh | bash
    - cmd[${nodes.k8sm.master.id}]: kubectl get node -l=gc=ZGC --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}' | awk '{print $1}' | awk -F"-" '{print $1}' | cut -c5-
    - setGlobals:
        zgcNode: ${response.out}
    - cmd[${nodes.k8sm.master.id}]: kubectl get node -l=gc=Shenandoah --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}' | awk '{print $1}' | awk -F"-" '{print $1}' | cut -c5-
    - setGlobals:
        shenandoahNode: ${response.out}
    - cmd[${nodes.k8sm.master.id}]: kubectl get node -l=gc=OpenJ9 --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}' | awk '{print $1}' | awk -F"-" '{print $1}' | cut -c5-
    - setGlobals:
        openj9Node: ${response.out}
    - cmd[${nodes.k8sm.master.id}]: kubectl get node -l=gc=G1 --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}' | awk '{print $1}' | awk -F"-" '{print $1}' | cut -c5-
    - setGlobals:
        g1Node: ${response.out}
    - cmd[${nodes.k8sm.master.id}]: kubectl get node -l=gc=C4 --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}' | awk '{print $1}' | awk -F"-" '{print $1}' | cut -c5-
    - setGlobals:
        c4Node: ${response.out}
    - cmd[${nodes.k8sm.master.id}]: kubectl get node -l=gc=G1-dragon --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}' | awk '{print $1}' | awk -F"-" '{print $1}' | cut -c5-
    - setGlobals:
        dragonNode: ${response.out}
  renameNodes:
     - jelastic.environment.control.SetNodeDisplayName:
          envName: ${env.name}
          nodeId: ${globals.zgcNode}
          displayName: ZGC
     - jelastic.environment.control.SetNodeDisplayName:
          envName: ${env.name}
          nodeId: ${globals.shenandoahNode}
          displayName: Shenandoah
     - jelastic.environment.control.SetNodeDisplayName:
          envName: ${env.name}
          nodeId: ${globals.openj9Node}
          displayName: Openj9
     - jelastic.environment.control.SetNodeDisplayName:
          envName: ${env.name}
          nodeId: ${globals.g1Node}
          displayName: G1
     - jelastic.environment.control.SetNodeDisplayName:
          envName: ${env.name}
          nodeId: ${globals.c4Node}
          displayName: C4
     - jelastic.environment.control.SetNodeDisplayName:
          envName: ${env.name}
          nodeId: ${globals.dragonNode}
          displayName: G1-Dragonwell
  setCloudlets:
    env.control.SetCloudletsCountByGroup:
      nodeGroup: cp
      fixedCloudlets: 1
      flexibleCloudlets: ${globals.cloudlets}

  deploy:
    - cmd [${nodes.k8sm.master.id}]: |-
       kubectl create namespace java || true
       kubectl delete deployment --force --grace-period=0 -l=app=java -n java || true
       kubectl delete pods -n java $(kubectl get pods -l=app=java -n java --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}' | awk '{print $1}') --force --grace-period=0 || true
       wget ${baseUrl}/java-dashboard-mem.json -O java-dashboard-mem.json
       wget ${baseUrl}/java-dashboard-cpu.json -O java-dashboard-cpu.json
       export grafana_secret=$(kubectl get secret --namespace kubernetes-monitoring monitoring-grafana -o jsonpath='{.data.admin-password}' | base64 --decode ; echo)
       curl -s -k -u "admin:${grafana_secret}" -X POST -H "Accept: application/json" -H "Content-Type: application/json" -d @java-dashboard-mem.json  http://${env.domain}/grafana/api/dashboards/db/
       curl -s -k -u "admin:${grafana_secret}" -X POST -H "Accept: application/json" -H "Content-Type: application/json" -d @java-dashboard-cpu.json  http://${env.domain}/grafana/api/dashboards/db/
       curl ${baseUrl}/deployments/adoptopenjdk.yaml | sed "s/%JAVA_OPTS%/${globals.common} ${globals.adoptopenjdk}/g" | sed "s/%MEM_LIMIT%/${globals.limit}/g" | sed "s/%CMD%/${globals.cmd}/g" | kubectl apply -f -
       curl ${baseUrl}/deployments/libericajdk12.yaml | sed "s/%JAVA_OPTS%/${globals.common} ${globals.liberica}/g" | sed "s/%MEM_LIMIT%/${globals.limit}/g" | sed "s/%CMD%/${globals.cmd}/g" | kubectl apply -f -
       curl ${baseUrl}/deployments/openj9.yaml | sed "s/%JAVA_OPTS%/${globals.common} ${globals.openj9}/g" | sed "s/%MEM_LIMIT%/${globals.limit}/g" | sed "s/%CMD%/${globals.cmd}/g" | kubectl apply -f -
       curl ${baseUrl}/deployments/openjdk13.yaml | sed "s/%JAVA_OPTS%/${globals.common} ${globals.openjdk}/g" | sed "s/%MEM_LIMIT%/${globals.limit}/g" | sed "s/%CMD%/${globals.cmd}/g" | kubectl apply -f -
       curl ${baseUrl}/deployments/zulujdk.yaml | sed "s/%JAVA_OPTS%/${globals.common} ${globals.zulujdk}/g" | sed "s/%MEM_LIMIT%/${globals.limit}/g" | sed "s/%CMD%/${globals.cmd}/g" | kubectl apply -f -
       curl ${baseUrl}/deployments/zing.yaml | sed "s/%JAVA_OPTS%/${globals.zing}/g" | sed "s/%MEM_LIMIT%/${globals.limit}/g" | sed "s/%CMD%/${globals.cmd}/g" | kubectl apply -f -
       curl ${baseUrl}/deployments/dragonwell.yaml | sed "s/%JAVA_OPTS%/${globals.dragonwell}/g" | sed "s/%MEM_LIMIT%/${globals.limit}/g" | sed "s/%CMD%/${globals.cmd}/g" | kubectl apply -f -
  monit:
    - cmd[${nodes.k8sm.master.id}]: kubectl get secret --namespace kubernetes-monitoring monitoring-grafana -o jsonpath='{.data.admin-password}' | base64 --decode
    - setGlobals:
        monit_token: ${response.out}
  getPods:
      - cmd[${nodes.k8sm.master.id}]: kubectl get pods -l=k8s-app=java-shenandoah -n java --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}' | awk '{print $1}'
      - setGlobals:
          adoptOpenJDKPod: ${response.out}
      - cmd[${nodes.k8sm.master.id}]: kubectl get pods -l=k8s-app=java-g1 -n java --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}' | awk '{print $1}'
      - setGlobals:
          libericajdkPod: ${response.out}
      - cmd[${nodes.k8sm.master.id}]: kubectl get pods -l=k8s-app=java-openj9 -n java --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}' | awk '{print $1}'
      - setGlobals:
          openj9Pod: ${response.out}
      - cmd[${nodes.k8sm.master.id}]: kubectl get pods -l=k8s-app=java-zgc -n java --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}' | awk '{print $1}'
      - setGlobals:
          openjdkPod: ${response.out}
      - cmd[${nodes.k8sm.master.id}]: kubectl get pods -l=k8s-app=java-c4 -n java --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}' | awk '{print $1}'
      - setGlobals:
          zingPod: ${response.out}
      - cmd[${nodes.k8sm.master.id}]: kubectl get pods -l=k8s-app=java-g1-dragonwell -n java --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}' | awk '{print $1}'
      - setGlobals:
          dragonwell: ${response.out}
      - setGlobals:
          success: |
              Pods have been deployed to namespace java.

              Get pods: `kubectl get pods -n java`

              Get deployments: `kubectl get deployments -n java`

              Get logs: `kubectl logs -f $deploymentName -n java`

              [Memory Utilization Dashboard](${env.url}grafana/d/java-mem/java-memory?orgId=1&refresh=5s&from=now-5m&to=now)

              [CPU Utilization Dashboard](${env.url}grafana/d/java-cpu/java-cpu?orgId=1&refresh=5s&from=now-5m&to=now)

              Login: admin/${globals.monit_token}

success: ${globals.success}
